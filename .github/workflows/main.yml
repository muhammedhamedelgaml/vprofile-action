name: vprofile-action
on: workflow_dispatch   # manual trigger
env:
    AWS_REGION: us-east-1 
    ECR_REPOSITROY: vprofile-repo   # ECR repo name 
    EKS_CLUSTER:  vprofile-eks


    

jobs:    
  Testing:
    runs-on: ubuntu-latest
    steps:
     - name: code checkout
       uses: actions/checkout@v4

     - name: maven test
       run: mvn test  

     - name: maven checkstyle
       run: mvn checkstyle:checkstyle

    # Setup java 17 to be default (sonar-scanner requirement as of 5.x)
     - name: set java 17 for sonar scanner
       uses: actions/setup-java@v3
       with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'
        # Setup sonar-scanner
     - name: Setup SonarQube
       uses: warchant/setup-sonar-scanner@v7
      # Run sonar-scanner
     - name: SonarQube Scan
       run: sonar-scanner
          -Dsonar.host.url=${{ secrets.SONAR_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.sources=src/
          -Dsonar.junit.reportsPath=target/surefire-reports/
          -Dsonar.jacoco.reportsPath=target/jacoco.exec
          -Dsonar.java.checkstyle.reportsPath=target/checkstyle-result.xml
          -Dsonar.java.binaries=target/test-classes/com/visualpathit/account

       # Check the Quality Gate status.
     - name: SonarQube Quality Gate check
       id: sonarqube-quality-gate-check
       uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
       timeout-minutes: 5
       env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         SONAR_HOST_URL: ${{ secrets.SONAR_URL }}   #OPTIONAL         

          

## BUILD_AND_PUBLISH JOB TO BUILD DOCKER IMAGE AND UPLOAD IT 
  BUILD_AND_PUBLISH:    
    needs: Testing
    runs-on: ubuntu-latest
    steps:
     - name: code checkout
       uses: actions/checkout@v4
    
    
     - name: upload image to ECR
       uses: appleboy/docker-ecr-action@master
       with:
            access_key: ${{ secrets.AWS_ACCESS_KEY_ID}}
            secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
            registry: ${{ secrets.REGISTRY }}
            repo: ${{env.ECR_REPOSITROY}}
            region: ${{env.AWS_REGION}}
            tags: latest,${{ github.run_number}}
            daemon_off: false
            dockerfile: ./Dockerfile
            context:  ./           
   

